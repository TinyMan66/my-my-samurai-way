{"version":3,"file":"static/js/141.811cf145.chunk.js","mappings":"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","sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/ProfileInfo/ProfileStatusHook.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__GfYXV\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusProps = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusProps> = (props,) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{status || \"-----\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\n                </div>\n            }\n        </div>\n    );\n}","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {ProfilePropsType} from \"../Profile\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusHook\";\n\nexport const ProfileInfo = ({profile, status, updateStatus}: ProfilePropsType) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return <>\n        {profile\n            ? (<div>\n                    <div className={s.descriptionBlock}>\n                        <img src={profile.photos.large} alt={\"profile photo \"}/>\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                    </div>\n                </div>\n            )\n            : (<Preloader/>\n            )\n        }\n    </>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__xF1+G\",\"post\":\"MyPosts_post__v5GfN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__4hswY\"};","import React from \"react\";\nimport s from './Post.module.css'\n\ntype PostPropsType = {\n    id: number\n    message: string\n    likeCounts: number\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img src='https://www.my-sfinks.ru/photo/img/kot-sfinks-s-ochkami-34.jpg' alt={'avatar'}/>\n            {props.message}\n            <div>\n                <span>LIKE</span> {props.likeCounts}\n            </div>\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea} name=\"newPostText\"\n            placeholder=\"Post message\" validate={[required, maxLength10]}/>\n            <button>Add post</button>\n            <button>Remove</button>\n        </form>\n    )\n}\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'profileAddPostForm'})(AddNewPostForm)\n\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n    const postsElements = props.posts.map(p =>\n        <Post\n            key={p.id}\n            id={p.id}\n            message={p.message}\n            likeCounts={p.likeCounts}\n        />);\n\n    const addNewPost = (values: FormDataType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My Posts</h3>\n            {/*<div>*/}\n            {/*    <div><textarea onChange={newPostChangeHandler} value={props.newPostText}/></div>*/}\n            {/*    <div>*/}\n            {/*        <button onClick={addPostHandler}>Add post</button>*/}\n            {/*        <button>Remove</button>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n            <AddPostReduxForm onSubmit={addNewPost}/>\n            <div className={s.post}>{postsElements}</div>\n        </div>\n    )\n});","import React from \"react\";\nimport {\n    addPostActionCreator,\n    PostType\n} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/store\";\nimport {Dispatch} from \"redux\";\n\ntype mapStatePropsType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchPropsType;\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\n// types\nexport type ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = String(this.props.authorizedUserId);\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        }\n\n        !isNaN(+userId) && this.props.getUserProfile(+userId);\n        !isNaN(+userId) && this.props.getStatus(+userId);\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.data.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter\n)(ProfileContainer);\n\n// types\ntype PathParamsType = {\n    userId: string | undefined\n}\ntype mapStatePropsType = {\n    profile: ProfileType,\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype mapDispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n}\ntype ProfileContainerPropsType = mapStatePropsType & mapDispatchPropsType;\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType;","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => ({\n    isAuth: state.auth.isAuth\n});\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","src","photos","large","alt","Preloader","Post","message","likeCounts","maxLength10","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","postsElements","posts","map","p","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","isNaN","getUserProfile","getStatus","compose","withAuthRedirect","auth","data","isAuth","withRouter","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}