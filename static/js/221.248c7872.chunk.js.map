{"version":3,"file":"static/js/221.248c7872.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusHook.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://samurai-way/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__GfYXV\",\"mainPhoto\":\"ProfileInfo_mainPhoto__G1yGj\",\"contact\":\"ProfileInfo_contact__x4Eli\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusProps = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusProps> = (props,) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{status || \"-----\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\n                </div>\n            }\n        </div>\n    );\n}","import React from \"react\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from './ProfileInfo.module.css'\nimport style from '../../common/FormsControls/FormsControls.module.css'\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\n                                                                                                   handleSubmit,\n                                                                                                   error,\n                                                                                                   profile\n                                                                                               }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button>Save</button>\n            </div>\n            { error && <div className={style.formSummaryError}>{error}</div> }\n            <div>\n                <b>Full name: </b> {createField('Full Name', 'fullName', [], Input)}\n            </div>\n            <div>\n                <b>About me: </b> {createField('About me', 'aboutMe', [], Textarea)}\n            </div>\n            <div>\n                <b>Looking for a job: </b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'}, 'Yes')}\n            </div>\n            <div>\n                <b>My professional\n                    skills: </b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\n            </div>\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={s.contact}>\n                    <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b></div>\n            })}\n            </div>\n        </form>\n    )\n}\n\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormDataType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataFormReduxForm\n\n// types\nexport type ProfileFormDataType = {\n    fullName: string | null\n    aboutMe: string | null\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n}\n\ntype ProfileDataFormPropsType = {\n    profile: ProfileType\n}\n","import React, {ChangeEvent, FC, useState} from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {ProfilePropsType} from \"../Profile\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusHook\";\nimport userIcon from \"../../../assets/images/user_icon.png\";\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\nimport ProfileDataForm, {ProfileFormDataType} from \"./ProfileDataForm\";\n\n\nexport const ProfileInfo = ({isOwner, profile, status, updateStatus, savePhoto, saveProfile}: ProfilePropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n    const onSubmit = (formData: ProfileFormDataType) => {\n        saveProfile(formData as ProfileType).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    return <>\n        {profile\n            ? (<div>\n                    <div className={s.descriptionBlock}>\n                        <img src={profile.photos.large || userIcon} alt={\"profile photo \"} className={s.mainPhoto}/>\n                        {isOwner && <input type=\"file\" accept=\".jpg, .jpeg, .png\" onChange={onMainPhotoSelected}/>}\n                        <div>\n                            <b>Status: </b><ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                        </div>\n\n                        {editMode\n                            ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile}/>\n                            : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\n                        }\n                    </div>\n                </div>\n            )\n            : (<Preloader/>\n            )\n        }\n    </>\n}\n\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div>\n            {isOwner && <div>\n                <button onClick={goToEditMode}>Edit</button>\n            </div>}\n            <div>\n                <b>Full name: </b> {profile.fullName}\n            </div>\n            <div>\n                <b>About me: </b> {profile.aboutMe}\n            </div>\n            <div>\n                <b>Looking for a job: </b> {profile.lookingForAJob ? 'YES' : 'NO'}\n            </div>\n            {profile.lookingForAJob &&\n                <div>\n                    <b>My professional skills: </b> {profile.lookingForAJobDescription}\n                </div>\n            }\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key}\n                                contactValue={profile.contacts[key as keyof ContactsType]}/>\n            })}\n            </div>\n        </div>\n    )\n}\n\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contact}>\n            <b>{contactTitle}</b> : {contactValue}\n        </div>\n    )\n}\n\n// types\ntype ContactPropsType = {\n    contactTitle: string\n    contactValue: string\n}\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__xF1+G\",\"post\":\"MyPosts_post__v5GfN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__4hswY\"};","import React from \"react\";\nimport s from './Post.module.css'\n\ntype PostPropsType = {\n    id: number\n    message: string\n    likeCounts: number\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}>\n            <img src='https://www.my-sfinks.ru/photo/img/kot-sfinks-s-ochkami-34.jpg' alt={'avatar'}/>\n            {props.message}\n            <div>\n                <span>LIKE</span> {props.likeCounts}\n            </div>\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport s from './MyPosts.module.css'\nimport {Post} from \"./Post/Post\";\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea} name=\"newPostText\"\n                   placeholder=\"Post message\" validate={[required, maxLength10]}/>\n            <button>Add post</button>\n        </form>\n    )\n}\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'profileAddPostForm'})(AddNewPostForm)\n\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n    const postsElements = props.posts.map(p =>\n        <Post\n            key={p.id}\n            id={p.id}\n            message={p.message}\n            likeCounts={p.likeCounts}\n        />);\n\n    const addNewPost = (values: FormDataType) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My Posts</h3>\n            {/*<div>*/}\n            {/*    <div><textarea onChange={newPostChangeHandler} value={props.newPostText}/></div>*/}\n            {/*    <div>*/}\n            {/*        <button onClick={addPostHandler}>Add post</button>*/}\n            {/*        <button>Remove</button>*/}\n            {/*    </div>*/}\n            {/*</div>*/}\n            <AddPostReduxForm onSubmit={addNewPost}/>\n            <div className={s.post}>{postsElements}</div>\n        </div>\n    )\n});","import React from \"react\";\nimport {\n    addPostActionCreator,\n    PostType\n} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/store\";\nimport {Dispatch} from \"redux\";\n\ntype mapStatePropsType = {\n    posts: Array<PostType>\n    newPostText: string\n}\n\ntype mapDispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchPropsType;\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from \"react\";\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\n// types\nexport type ProfilePropsType = {\n    isOwner: boolean\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\n","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {\n    getStatus,\n    getUserProfile,\n    ProfileType,\n    savePhoto,\n    saveProfile,\n    updateStatus\n} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = String(this.props.authorizedUserId);\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        }\n\n        !isNaN(+userId) && this.props.getUserProfile(+userId);\n        !isNaN(+userId) && this.props.getStatus(+userId);\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.data.id,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n// types\ntype PathParamsType = {\n    userId: string | undefined\n}\ntype mapStatePropsType = {\n    profile: ProfileType,\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype mapDispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: File) => void\n    saveProfile: (profile: ProfileType) => Promise<void>\n}\ntype ProfileContainerPropsType = mapStatePropsType & mapDispatchPropsType;\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType;","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => ({\n    isAuth: state.auth.isAuth\n});\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","error","profile","onSubmit","className","style","createField","Input","Textarea","type","Object","keys","contacts","map","key","s","ProfileInfo","isOwner","savePhoto","saveProfile","src","photos","large","userIcon","alt","accept","target","files","length","initialValues","formData","then","ProfileData","goToEditMode","Preloader","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","Post","message","likeCounts","maxLength10","maxLengthCreator","AddPostReduxForm","Field","component","name","placeholder","validate","required","MyPosts","React","postsElements","posts","p","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","isNaN","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withAuthRedirect","auth","data","isAuth","withRouter","mapStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}