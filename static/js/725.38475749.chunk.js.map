{"version":3,"file":"static/js/725.38475749.chunk.js","mappings":"iLACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCWnKA,EAAa,SAACC,GACvB,OACI,gBAAKC,UAAS,UAAKC,EAAAA,OAAL,YAAiBA,EAAAA,QAA/B,UACI,UAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,WACI,gBAAKC,IAAKL,EAAMM,SADpB,IAC+BN,EAAMO,WCTpCC,EAAU,SAACR,GACpB,OACI,0BACI,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMS,a,uCCHxCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgBxBC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAd+B,SAACb,GAC/D,OACI,kBAAMe,SAAUf,EAAMgB,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcH,KAAK,iBAC7De,YAAY,0BAEvB,0BACI,6C,uCCiBHC,GAAmBC,EAAAA,EAAAA,IAC5BC,EAAAA,GACAC,EAAAA,EAAAA,KAfoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAyBD,SAKdP,ECvBT,SAACxB,GAEpB,IAAM2B,EAAQ3B,EAAM4B,YAEdK,EAAkBN,EAAMO,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACrC,EAAD,CAAuBO,OAAQ8B,EAAE9B,OAAQC,KAAM6B,EAAE7B,KAAMH,GAAIgC,EAAEhC,IAA5CgC,EAAEhC,OAE5DiC,EAAmBV,EAAMW,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC/B,EAAD,CAAoBC,QAAS8B,EAAE9B,SAAjB8B,EAAEnC,OAMjE,OACI,iBAAKH,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACK+B,KAEL,gBAAKhC,UAAWC,EAAAA,SAAhB,UACI,yBAAMmC,OAEV,SAACzB,EAAD,CAAqBG,SAZP,SAACyB,GACnBxC,EAAM8B,YAAYU,EAAOT,0B,gICX3BU,EAA6B,SAACd,GAAD,MAA6C,CAC5Ee,OAAQf,EAAMgB,KAAKD,SAGhB,SAASjB,EAAoBmB,GAUhC,OAAOlB,EAAAA,EAAAA,IAAQe,EAARf,EARmB,SAAC1B,GACvB,IAAK0C,EAAwB1C,EAAxB0C,OAAWG,GAAhB,OAA6B7C,EAA7B,GAEA,OAAK0C,GAEE,SAACE,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAU1C,GAAI","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/Message/DialogsContainer.tsx","Components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__7Hmvy\",\"dialogsItems\":\"Dialogs_dialogsItems__PCxFJ\",\"active\":\"Dialogs_active__Ugg3u\",\"messages\":\"Dialogs_messages__YwRox\",\"message\":\"Dialogs_message__6rUes\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemType = {\n    id: number\n    name: string\n    avatar: string\n\n}\n// let path = \"/dialogs/\" + props.id не работает\n\nexport const DialogItem = (props: DialogItemType) => {\n    return (\n        <div className={`${s.dialog} ${s.active}`}>\n            <NavLink to={\"/dialogs/\" + props.id}>\n                <img src={props.avatar}/> {props.name}\n            </NavLink>\n        </div>\n    )\n}\n","import React from 'react';\nimport s from './../Dialogs.module.css';\n\ntype MessageType = {\n    message: string\n}\n\nexport const Message = (props: MessageType) => {\n    return (\n        <div>\n            <div className={s.message}>{props.message}</div>\n        </div>\n\n    )\n}\n","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {FormDataType} from \"../Dialogs\";\n// import {useFormik, Field, FormikProps} from \"formik\";\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMassageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} validate={[required, maxLength50]} name=\"newMessageBody\"\n                       placeholder=\"Enter your message\"/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddMassageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMassageForm'})(AddMassageForm)\n\n// export const AddMassageForm: React.FC<FormikProps<FormikErrorType>> = (props) => {\n// type FormikErrorType = {\n//     newMessageBody?: string\n// }\n// const formik = useFormik({\n//     initialValues: {\n//         newMessageBody: ''\n//     },\n//     validate: values => {\n//         const errors: FormikErrorType = {}\n//         if (!values.newMessageBody) {\n//             errors.newMessageBody = 'Required'\n//         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.newMessageBody)) {\n//             errors.newMessageBody = 'Invalid text'\n//         } else if (values.newMessageBody.length > 50) {\n//             errors.newMessageBody = 'Allowed length is 50 symbols'\n//         }\n//\n//         return errors;\n//     },\n//     onSubmit: values => {\n//         alert(JSON.stringify(values));\n//         formik.resetForm();\n//     },\n// })\n//\n// return (\n//     <form onSubmit={formik.handleSubmit}>\n//         <div>\n//             <textarea name=\"newMessageBody\" value={formik.values.newMessageBody} placeholder=\"Enter your message\" onBlur={formik.handleBlur}/>\n//             {formik.touched.newMessageBody && formik.errors.newMessageBody? <div>{formik.errors.newMessageBody}</div> : null}\n//\n//\n//             <Field as={Textarea} value={formik.values.newMessageBody} name=\"newMessageBody\" placeholder=\"Enter your message\" onBlur={formik.handleBlur}/>\n//             {formik.touched.newMessageBody && formik.errors.newMessageBody? <div>{formik.errors.newMessageBody}</div> : null}\n//         </div>\n//         <div>\n//             <button>Send</button>\n//         </div>\n//     </form>\n// )\n// }","import React, {ComponentType} from 'react';\nimport {Dialogs} from \"../Dialogs\";\nimport {\n    initialStateType,\n    sendMessageActionCreator,\n} from \"../../../redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\n\ntype mapStatePropsType = {\n    dialogsPage: initialStateType\n}\n\ntype mapDispatchPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = mapStatePropsType & mapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageActionCreator(newMessageBody));\n        }\n    }\n}\n\nexport const DialogsContainer = compose<ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, mapDispatchToProps)\n)(Dialogs)","import React from 'react';\nimport s from './Dialogs.module.css';\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./Message/DialogsContainer\";\nimport {AddMassageReduxForm} from \"./AddMessageForm/AddMessageForm\";\n\nexport type FormDataType = {\n    newMessageBody: string\n}\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n    const state = props.dialogsPage;\n\n    const dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} avatar={d.avatar} name={d.name} id={d.id}/>);\n\n    const massagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>);\n\n    const addNewMassage = (values: FormDataType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{massagesElements}</div>\n            </div>\n            <AddMassageReduxForm onSubmit={addNewMassage}/>\n        </div>\n    )\n}\n\n","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => ({\n    isAuth: state.auth.isAuth\n});\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}"],"names":["DialogItem","props","className","s","to","id","src","avatar","name","Message","message","maxLength50","maxLengthCreator","AddMassageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","DialogsContainer","compose","withAuthRedirect","connect","state","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageActionCreator","dialogsElements","dialogs","map","d","massagesElements","messages","m","values","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}